angular.module("fgModal", ["ngAnimate"]).provider("Modal", function() {
    var e = function(e, t) {
            this.templateUrl = t.templateUrl, this.template = t.template, this.defaults = t.defaults, this.controller = t.controller, this.name = e
        },
        t = {},
        n = this;
    this.modal = function(i, o) {
        return t[i] = function(t) {
            var n = t.invoke(o);
            return new e(i, n)
        }, n
    }, this.$get = ["$document", "$compile", "$rootScope", "$http", "$templateCache", "$q", "$animate", "$injector", "$controller", function(n, i, o, r, s, c, l, a, u) {
        Object.keys(t).forEach(function(e) {
            t[e] = t[e](a)
        });
        var f, d = o.$new(),
            h = [],
            p = function(e) {
                var t = this,
                    n = {
                        accept: c.defer(),
                        dismiss: c.defer(),
                        destroy: c.defer()
                    },
                    i = {
                        link: [],
                        overlay: [],
                        conceal: [],
                        accept: [],
                        dismiss: [],
                        destroy: []
                    },
                    o = function(e) {
                        return c.all(i[e].map(function(e) {
                            return c.when(e())
                        })).then(function() {
                            return n[e].resolve(), n[e].promise
                        })
                    },
                    r = function(e) {
                        i[e].forEach(function(e) {
                            e()
                        })
                    };
                this.$template = e, this.$index = 0, this.accept = function() {
                    return o("accept").then(t.destroy)
                }, this.dismiss = function() {
                    return o("dismiss").then(t.destroy)
                }, this.destroy = function() {
                    return o("destroy").then(function() {
                        var e = h.indexOf(t);
                        h.splice(e, 1), t.$element.remove(), h.forEach(function(e) {
                            e.$index > t.$index && e.overlay()
                        }), d.show = h.length, t.$scope.$destroy()
                    })
                }, this.when = function(e) {
                    return n[e].promise
                }, this.link = function(n, i) {
                    t.$element = i, t.$scope = n, e.controller && u(e.controller, {
                        $scope: n,
                        $modal: t,
                        $element: i
                    }), f.append(i), t.$element.css("z-index", 1e4), h.forEach(function(e) {
                        e.conceal()
                    }), h.unshift(t), d.show = !0, r("link")
                }, this.overlay = function() {
                    0 !== t.$index && (t.$element.css("z-index", "+=1"), t.$index--, r("overlay"))
                }, this.conceal = function() {
                    t.$element.css("z-index", "-=1"), t.$index++, r("conceal")
                }, this.on = function(e, n) {
                    return e.split(" ").forEach(function(e) {
                        i[e].push(n.bind(t))
                    }), t
                }
            };
        i(angular.element('<div class="fg-modal-wrapper ng-hide" ng-show="show"></div>'))(d, function(e) {
            f = e, n.find("body").append(f)
        }), e.prototype.pop = function(e) {
            var t = new p(this);
            if (e = e || {}, e.$id) e = e.$new();
            else {
                var n = o.$new();
                for (var c in e) n[c] = e[c];
                e = n
            }
            e.$modal = t;
            var l = this,
                a = function(n) {
                    i(n)(e, function(n) {
                        t.link(e, n)
                    })
                };
            return this.templateUrl ? r({
                method: "GET",
                cache: s,
                url: this.templateUrl,
                type: "text/html"
            }).success(a) : a(this.template), this.defaults && Object.keys(this.defaults).forEach(function(e) {
                l.defaults[e] instanceof Array ? l.defaults[e].forEach(function(n) {
                    t.on(e, n)
                }) : t.on(e, l.defaults[e])
            }), t
        };
        var m = function(e) {
            return e ? t[e] : h[0]
        };
        return m.list = function() {
            return h.sort(function(e, t) {
                return e.$index > t.$index
            })
        }, m
    }]
});
