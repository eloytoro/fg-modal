angular.module("fgModal", ["ngAnimate"]).provider("Modal", function() {
    var e = function(e, n) {
            this.templateUrl = n.templateUrl, this.template = n.template, this.defaults = n.defaults, this.controller = n.controller, this.name = e
        },
        n = {},
        t = this;
    this.modal = function(o, i) {
        return n[o] = function(n) {
            var t = n.invoke(i);
            return new e(o, t)
        }, t
    }, this.$get = ["$document", "$compile", "$rootScope", "$http", "$templateCache", "$q", "$animate", "$injector", "$controller", function(t, o, i, r, c, s, l, a, u) {
        Object.keys(n).forEach(function(e) {
            n[e] = n[e](a)
        });
        var f, h = i.$new(),
            d = [],
            p = function(e) {
                var n = this,
                    t = {
                        accept: s.defer(),
                        dismiss: s.defer(),
                        destroy: s.defer()
                    },
                    o = {
                        when: function(e) {
                            return s.all(o[e].map(function(e) {
                                return s.when(e())
                            })).then(function() {
                                return t[e].resolve(), t[e].promise
                            })
                        },
                        call: function(e) {
                            o[e].forEach(function(e) {
                                e()
                            })
                        },
                        link: [],
                        overlay: [],
                        conceal: [],
                        accept: [],
                        dismiss: [],
                        destroy: []
                    };
                this.$template = e, this.$index = 0, this.accept = function() {
                    return o.when("accept").then(n.destroy)
                }, this.dismiss = function() {
                    return o.when("dismiss").then(n.destroy)
                }, this.destroy = function() {
                    return o.when("destroy").then(function() {
                        var e = d.indexOf(n);
                        d.splice(e, 1), n.element.remove(), d.forEach(function(e) {
                            e.$index > n.$index && e.overlay()
                        }), h.show = d.length, n.$scope.$destroy()
                    })
                }, this.when = function(e) {
                    return t[e].promise
                }, this.link = function(t, i) {
                    n.element = i, n.$scope = t, e.controller && u(e.controller, {
                        $scope: t,
                        $modal: n
                    }), f.append(i), n.element.css("z-index", 1e4), d.forEach(function(e) {
                        e.conceal()
                    }), d.unshift(n), h.show = !0, o.call("link")
                }, this.overlay = function() {
                    0 !== n.$index && (n.element.css("z-index", "+=1"), n.$index--, o.call("overlay"))
                }, this.conceal = function() {
                    n.element.css("z-index", "-=1"), n.$index++, o.call("conceal")
                }, this.on = function(e, t) {
                    return e.split(" ").forEach(function(e) {
                        o[e].push(t.bind(n))
                    }), n
                }
            };
        o(angular.element('<div class="fg-modal-wrapper ng-hide" ng-show="show"></div>'))(h, function(e) {
            f = e, t.find("body").append(f)
        }), e.prototype.pop = function(e) {
            var n = new p(this);
            if (e = e || {}, "Scope" !== e.constructor.name) {
                var t = i.$new();
                for (var s in e) t[s] = e[s];
                e = t
            } else e = e.$new();
            e.$modal = n;
            var l = this,
                a = function(t) {
                    o(t)(e, function(t) {
                        n.link(e, t)
                    })
                };
            return this.templateUrl ? r({
                method: "GET",
                cache: c,
                url: this.templateUrl,
                type: "text/html"
            }).success(a) : a(this.template), this.defaults && Object.keys(this.defaults).forEach(function(e) {
                l.defaults[e] instanceof Array ? l.defaults[e].forEach(function(t) {
                    n.on(e, t)
                }) : n.on(e, l.defaults[e])
            }), n
        };
        var m = function(e) {
            return e ? n[e] : d[0]
        };
        return m.list = function() {
            return d.sort(function(e, n) {
                return e.$index > n.$index
            })
        }, m
    }]
});
