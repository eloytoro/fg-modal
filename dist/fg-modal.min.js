angular.module("fgModal", ["ngAnimate"]).provider("Modal", function() {
    var e = function(e, n) {
            this.templateUrl = n.templateUrl, this.template = n.template, this.defaults = n.defaults || {}, this.controller = n.controller, this.resolve = n.resolve || {}, this.name = e
        },
        n = {},
        t = this;
    this.modal = function(o, i) {
        return n[o] = function(n) {
            var t = n.invoke(i);
            return new e(o, t)
        }, t
    }, this.loadingTemplateUrl = null, this.loadingMask = !0, this.$get = ["$document", "$compile", "$rootScope", "$http", "$templateCache", "$q", "$animate", "$injector", "$controller", function(o, i, r, l, s, a, c, d, u) {
        Object.keys(n).forEach(function(e) {
            n[e] = n[e](d)
        });
        var h, f = r.$new(),
            p = [];
        f.loadingTemplateUrl = t.loadingTemplateUrl;
        var m = function(e) {
            var n = this,
                t = {
                    accept: a.defer(),
                    dismiss: a.defer(),
                    destroy: a.defer()
                },
                o = {
                    link: [],
                    overlay: [],
                    conceal: [],
                    accept: [],
                    dismiss: [],
                    destroy: []
                },
                i = function(e) {
                    return a.all(o[e].map(function(e) {
                        return a.when(e())
                    })).then(function() {
                        return t[e].resolve(), t[e].promise
                    })
                },
                r = function(e) {
                    o[e].forEach(function(e) {
                        e()
                    })
                };
            this.$template = e, this.$index = 0, this.accept = function() {
                return i("accept").then(n.destroy)
            }, this.dismiss = function() {
                return i("dismiss").then(n.destroy)
            }, this.destroy = function() {
                return i("destroy").then(function() {
                    var e = p.indexOf(n);
                    p.splice(e, 1), n.$element.remove(), p.forEach(function(e) {
                        e.$index > n.$index && e.overlay()
                    }), f.show = p.length, n.$scope.$destroy()
                })
            }, this.when = function(e) {
                return t[e].promise
            }, this.link = function(t, o, i) {
                n.$element = o, n.$scope = t, e.controller && (i.$scope = t, i.$modal = n, i.$element = o, u(e.controller, i)), h.append(o), n.$element.css("z-index", 1e4), p.forEach(function(e) {
                    e.conceal()
                }), p.unshift(n), r("link")
            }, this.overlay = function() {
                0 !== n.$index && (n.$element.css("z-index", "+=1"), n.$index--, r("overlay"))
            }, this.conceal = function() {
                n.$element.css("z-index", "-=1"), n.$index++, r("conceal")
            }, this.on = function(e, t) {
                return e.split(" ").forEach(function(e) {
                    o[e].push(t.bind(n))
                }), n
            }
        };
        i(angular.element(['<div class="fg-modal-wrapper ng-hide" ng-show="show">', '<div ng-show="loading" ng-include="loadingTemplateUrl"></div>', "</div>"].join("")))(f, function(e) {
            h = e, o.find("body").append(h)
        }), e.prototype.pop = function(e) {
            var n = new m(this);
            if (e = e || {}, e.$id) e = e.$new();
            else {
                var o = r.$new();
                for (var c in e) o[c] = e[c];
                e = o
            }
            e.$modal = n;
            var u = this;
            return f.loading = !f.show && t.loadingMask, f.show = f.show || t.loadingMask, a.all({
                locals: a.all(Object.keys(this.resolve).reduce(function(e, n) {
                    return e[n] = a.when(d.invoke(u.resolve[n])), e
                }, {})),
                template: a.when(this.template || l({
                    method: "GET",
                    cache: s,
                    url: this.templateUrl,
                    type: "text/html"
                }))
            }).then(function(t) {
                i(t.template.data)(e, function(o) {
                    f.loading = !1, f.show = !0, n.link(e, o, t.locals)
                })
            }), Object.keys(this.defaults).forEach(function(e) {
                var t = u.defaults[e];
                (t instanceof Array ? t : [t]).forEach(function(t) {
                    n.on(e, t)
                })
            }), n
        };
        var $ = function(e) {
            return e ? n[e] : p[0]
        };
        return $.list = function() {
            return p.sort(function(e, n) {
                return e.$index > n.$index
            })
        }, $
    }]
});
